//main file for api calls.
import { createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react';

//creating an api to do requests through the redux toolkit
//just needs a reducerPath for name of our api to be called within our redux store
//from my basic understanding it will jsut have a base url and do behaviour 
//on certain paths to get data, fetchBaseQuery is a replacement for axios
//not to the extent of axios but a smaller version in redux. creates a slice for an api basically
//with all aspects of redux. 

/*
note fetchBaseQuery is just a predefined function that creates our react hook 
for us that will execute the api request, then add endpoints to it.
*/

export const shazamCoreApi = createApi({
    reducerPath: 'shazamCoreApi',
    baseQuery: fetchBaseQuery({
        baseUrl: 'https://shazam-core.p.rapidapi.com/v1',
        //prepares the headers for whenever we want to make a request
        //gets the headers object that exists in redux api slice
        //NOTE COULD BE AN ERROR HERE UNCOMMENT IF NEEDED
        prepareHeaders: (headers) =>{
            headers.set('X-RapidAPI-Key', '49747164a6msh99d1bd8d5149e0fp1a54e8jsn8fdc3bacc91c');
            return headers;
    }}),
    //building all of the endpoints of the api we want to create
    //can now call getTopCharts as a hook
    endpoints: (builder) => ({
        getTopCharts: builder.query({ query: () => 'charts/world' }),
        getSongsByGenre: builder.query({ query: (genre) => `/charts/genre-world?genre_code=${genre}`}),
        getSongDetails: builder.query({ query: (songid ) => `/tracks/details?track_id=${songid}`}),
        getSongRelated: builder.query({query: (songid) => `/tracks/related?track_id=${songid}`}),
        getArtistDetails: builder.query({query: (artistId) => `/artists/details?artist_id=${artistId}`}),
        getSongsByCountry: builder.query({ query: (countryCode) => `/charts/country?country_code=${countryCode}`}),
        getSongsBySearch: builder.query({ query: (searchTerm) => `/search/multi?search_type=SONGS_ARTISTS&query=${searchTerm}`}),
    }),
});

/*
note when we are fetching data from a place with query 
parameters then we need to take in as a parameter in our function 
an object that contains the songid and we need to dereference it
to fetch it from our api using the hook generated by RTK query
*/


export const {
    useGetTopChartsQuery,
    useGetSongsByGenreQuery,
    useGetSongDetailsQuery,
    useGetSongRelatedQuery,
    useGetArtistDetailsQuery,
    useGetSongsByCountryQuery,
    useGetSongsBySearchQuery,

} = shazamCoreApi;